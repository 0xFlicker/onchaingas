// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "./Compiler.sol";
import "./Base64.sol";
import "./GasLibs.sol";
import "./IMetaDataURI.sol";
import "./OnChainCheckRenderer_v2_interface.sol";

contract OnchainCheckRendererV2Image is IOnChainCheckRenderer_v2_Render {
  IDataChunkCompiler private compiler;
  uint256 private immutable MAX_MINT_GAS_PRICE = 1000000; // 1000 gwei mint would show all checks
  IMetaDataURI public upgradeContract;

  function render(
    uint256 /* tokenId */,
    uint256 seed,
    uint24 gasPrice,
    bool /* isDarkMode */,
    bool[80] memory isCheckRendered
  ) public pure returns (string memory) {
    return generateSvg(seed, gasPrice, isCheckRendered);
  }

  /**
   * @dev generates a top and bottom grid of checkmarks made up of 8 colors separated by empty space in the middle. 
     The lower the intensity, the more checkmarks will be missing in the two grids.
   * In addition, print the intensity value in the center of the grid, divided by wei (gasPriceGweiStr)
   */
  function generateSvg(uint256 seed, uint24 gasPrice, bool[80] memory isCheckRendered) public pure returns (string memory) {
    bool isDark = seed % 2 == 0;
    return string.concat(
      '<?xml version="1.0" encoding="UTF-8"?><svg aria-hidden="true" version="1.1" viewBox="0 0 512 688" xmlns="http://www.w3.org/2000/svg"><svg width="400" height="400"><defs><radialGradient id="SphereShade" cx="0.5" cy="0.5" r=".8" fx="0.35" fy="0.25"><stop offset="0"  stop-opacity="0"  /><stop offset=".3" stop-opacity="0.1"/><stop offset=".5" stop-opacity="0.3"/><stop offset=".9"  stop-opacity="1"  /></radialGradient></defs><rect width="100%" height="100%" fill="#',
      isDark ? '111111' : 'EEEEEE',
      '" />',
      generateTopGrid(seed, isCheckRendered),
      generateGasPriceText(gasPrice, isDark),
      generateBottomGrid(seed, isCheckRendered),
      '</svg>'
    );
  }

  function gasPriceToStr(uint24 gasPrice) public pure returns (string memory) {
    uint24 gasPriceLeftSideZero = gasPrice / 1000;
    uint24 gasPriceRightSideZero = gasPrice % 1000;
    return string.concat(
      GasLibs.uint2str(gasPriceLeftSideZero),
      ".",
      GasLibs.leftPad(GasLibs.uint2str(gasPriceRightSideZero), 3)
    );
  }

  function generateGasPriceText(uint24 gasPrice, bool isDark) internal pure returns (string memory) {
    return string.concat(
      '<text x="50%" text-anchor="middle" style="white-space: pre; fill: #',
      isDark ? 'EEEEEE' : '111111',
      '; font-family: Arial, sans-serif; font-size: 33.3px;" y="353">Minted at ',
      GasLibs.gasPriceToStr(gasPrice),
      " gwei",
      "</text>"
    );
  }

  function generateTopGrid(uint256 seed, bool[80] memory isCheckRendered) internal pure returns (string memory) {
    return string.concat(
      getCheckmarkRow(seed, isCheckRendered, 0, '104'),
      getCheckmarkRow(seed, isCheckRendered, 8, '144'),
      getCheckmarkRow(seed, isCheckRendered, 16, '184'),
      getCheckmarkRow(seed, isCheckRendered, 24, '224'),
      getCheckmarkRow(seed, isCheckRendered, 32, '264')
    );
  }

  function generateBottomGrid(uint256 seed, bool[80] memory isCheckRendered) internal pure returns (string memory) {
    return string.concat(
      getCheckmarkRow(seed, isCheckRendered, 40, '400'),
      getCheckmarkRow(seed, isCheckRendered, 48, '440'),
      getCheckmarkRow(seed, isCheckRendered, 56, '480'),
      getCheckmarkRow(seed, isCheckRendered, 64, '520'),
      getCheckmarkRow(seed, isCheckRendered, 72, '560')
    );
  }

  /**
   * @dev generates a row of checkmarks. Checkmarks are generated with the following rules:
   * 1. For each element in the row, use checmarkGenerates to see if it exists
   * 2. If it exists, generate a checkmark with a random color
   * 3. Colors are generated by taking the seed and bit shifting it to the right by the index * 3
   */
  function getCheckmarkRow(uint256 seed, bool[80] memory isCheckRendered, uint8 startIndex, string memory yPos) internal pure returns (string memory) {
    // SVG is 512 pixels wide and the checks have a margin of 16 pixels between each other and a 104 pixel margin on the left and right
    return string.concat(
      '<g transform="translate(0 ',
      yPos,
      ')">',
      getCheckmarkRow2(seed, isCheckRendered, startIndex),
      getCheckmarkRow3(seed, isCheckRendered, startIndex),
      '</g>'
    );
  }

    /**
   * @dev generates a row of checkmarks. Checkmarks are generated with the following rules:
   * 1. For each element in the row, use checmarkGenerates to see if it exists
   * 2. If it exists, generate a checkmark with a random color
   * 3. Colors are generated by taking the seed and bit shifting it to the right by the index * 3
   */
  function getCheckmarkRow2(uint256 seed, bool[80] memory isCheckRendered, uint8 startIndex) internal pure returns (string memory) {
    // SVG is 512 pixels wide and the checks have a margin of 16 pixels between each other and a 104 pixel margin on the left and right
    return string.concat(
      isCheckRendered[startIndex] ?  getCheckmark(GasLibs.uint2hex(uint24(seed >> (startIndex * 3))), '104') : '',
      isCheckRendered[startIndex + 1] ?  getCheckmark(GasLibs.uint2hex(uint24(seed >> ((startIndex + 1) * 3))), '144') : '',
      isCheckRendered[startIndex + 2] ?  getCheckmark(GasLibs.uint2hex(uint24(seed >> ((startIndex + 2) * 3))), '184') : '',
      isCheckRendered[startIndex + 3] ?  getCheckmark(GasLibs.uint2hex(uint24(seed >> ((startIndex + 3) * 3))), '224') : ''
    );
  }

    /**
   * @dev generates a row of checkmarks. Checkmarks are generated with the following rules:
   * 1. For each element in the row, use checmarkGenerates to see if it exists
   * 2. If it exists, generate a checkmark with a random color
   * 3. Colors are generated by taking the seed and bit shifting it to the right by the index * 3
   */
  function getCheckmarkRow3(uint256 seed, bool[80] memory isCheckRendered, uint8 startIndex) internal pure returns (string memory) {
    // SVG is 512 pixels wide and the checks have a margin of 16 pixels between each other and a 104 pixel margin on the left and right
    return string.concat(
      isCheckRendered[startIndex + 4] ?  getCheckmark(GasLibs.uint2hex(uint24(seed >> ((startIndex + 4) * 3))), '264') : '',
      isCheckRendered[startIndex + 5] ?  getCheckmark(GasLibs.uint2hex(uint24(seed >> ((startIndex + 5) * 3))), '304') : '',
      isCheckRendered[startIndex + 6] ?  getCheckmark(GasLibs.uint2hex(uint24(seed >> ((startIndex + 6) * 3))), '344') : '',
      isCheckRendered[startIndex + 7] ?  getCheckmark(GasLibs.uint2hex(uint24(seed >> ((startIndex + 7) * 3))), '384') : ''
    );
  }

  function getCheckmark(string memory colorStr, string memory xPos) internal pure returns (string memory) {
    return string.concat(
      '<g transform="translate(',
      xPos,
      ' 0)" fill="#',
      colorStr,
      '"><circle cx="24" cy="24" r="48" fill="#',
      colorStr,
      '"/><circle cx="24" cy="24" r="48" fill="url(#SphereShade)"/></g>'
    );
  }
}
