

float hash(uint n) {
    return fract(sin(float(n) * 43758.5453));
}

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 vUv = fragCoord / iResolution.xy;
    float t = iTime;
    uint seed = 7000u;
    float frequency = hash(seed) * 5.0 + 1.0;
    float speed = hash(seed + 1u) * 2.0 + 0.5;
    float hueShift = hash(seed + 2u) * 0.1 + 0.45;
    vec2 origin = vec2(hash(seed + 3u) * 0.8 + 0.1, hash(seed + 4u) * 0.8 + 0.1);
    float minSize = hash(seed + 5u) * 0.5;
    float hueRange = hash(seed + 6u) * 0.5 + 0.5;
    float saturation = hash(seed + 7u) * 0.5 + 0.5;
    float valueOffset = hash(seed + 8u) * 0.4 + 0.3;
    float rotationSpeed = hash(seed + 9u) * 2.0 - 1.0;

    vec2 uv = (vUv - origin) * frequency;
    float angle = atan(uv.y, uv.x) + t * speed;
    float r = length(uv);
    float initialHue = angle / (2.0 * 3.14159265);
    float rotatedHue = mod(initialHue + t * rotationSpeed, 1.0);
    float hue = mod(rotatedHue * hueRange + hueShift, 1.0);

    float v = 0.5 * cos(1111.283 * (sin(t) * 0.5 + 0.5) * (r + minSize)) + 0.5;
    vec3 color = hsv2rgb(vec3(hue, saturation, v * valueOffset));

    fragColor = vec4(color, 1.0);
}
