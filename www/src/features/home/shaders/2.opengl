float hash(uint n) {
    return fract(sin(float(n) * 43758.5453));
}

vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float perlinNoise(vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);
    f = f * f * (3.0 - 2.0 * f);
    float a = texture(iChannel0, (i + vec2(0.0, 0.0)) / 256.0).x;
    float b = texture(iChannel0, (i + vec2(1.0, 0.0)) / 256.0).x;
    float c = texture(iChannel0, (i + vec2(0.0, 1.0)) / 256.0).x;
    float d = texture(iChannel0, (i + vec2(1.0, 1.0)) / 256.0).x;
    return mix(a, b, f.x) + (c - a) * f.y * (1.0 - f.x) + (d - b) * f.x * f.y;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 vUv = fragCoord / iResolution.xy;
    float t = iTime;
    uint seed = 14000u;
    float hueShift = hash(seed) * 0.5;
    float saturation = hash(seed + 1u) * 0.5 + 0.5;
    float valueOffset = hash(seed + 2u) * 0.4 + 0.3;

    vec2 uv = vUv * 2.0;
    uv.y -= t * 0.1;

    float noise = perlinNoise(uv * 3.0 + vec2(t * 0.5, 0.0));
    noise += perlinNoise(uv * 6.0 + vec2(t * 0.25, 0.0)) * 0.5;
    noise += perlinNoise(uv * 12.0 + vec2(t * 0.125, 0.0)) * 0.25;
    noise = noise * 0.5 + 0.5;

    float hue = mod(hueShift + noise, 1.0);
    float value = valueOffset * noise;

    vec3 color = hsv2rgb(vec3(hue, saturation, value));

    fragColor = vec4(color, 1.0);
}
